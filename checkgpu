#!/usr/licensed/anaconda3/2020.2/bin/python -u

# post issues at https://github.com/jdh4/tigergpu_visualization
# or write to halverson@princeton.edu

import sys
sys.path = list(filter(lambda p: p.startswith("/usr"), sys.path))
import argparse
import textwrap
import numpy as np
import pandas as pd
from time import time
from datetime import datetime
from socket import gethostname

psr = argparse.ArgumentParser(add_help=False,
  description='Examine GPU utilization and usage of TigerGPU',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  epilog=textwrap.dedent('''
  Utilization is the fraction of time that a kernel is running on the GPU.
  For instance, a code with a main loop that runs a GPU kernel for 3 seconds
  and then does CPU work for 2 seconds has a utilization of 60%. Usage is a
  measure of the allocated GPU resources (it is independent of utilization).
  A code that runs for 12 hours using 4 GPUs has a usage of 48 GPU-hours.

  Examples:

    Create report for all users over the last week:
       $ checkgpu -d 7

    Show GPU usage by department over the last 36 hours:
       $ checkgpu -p -t 36

    Show users with a GPU utilization of less than 15% over the last 12 hours:
       $ checkgpu -c 15 -t 12

    Create report only for the user dkozuch over last 30 minutes:
       $ checkgpu -u dkozuch -t 0.5

    Create report for all users from June 1, 2020 to June 15, 2020:
       $ checkgpu -e 06/15/2020 -d 15
'''))

days_default = 1
grp = psr.add_mutually_exclusive_group(required=False)
grp.add_argument('-t', type=float, action='store', dest='hours',
    default=24, help='Create report over this many previous hours from now \
    (default: 24). Cannot be used with -d.')
grp.add_argument('-d', type=float, action='store', dest='days', default=days_default,
    help='Create report over this many previous days from now \
    (default: 1). Cannot be used with -t.')
psr.add_argument('-c', type=float, action='store', dest='util_cutoff',
    default=100, help='Only show users with less than this utilization(%%) \
    (default: 100)')
psr.add_argument('-g', type=float, action='store', dest='gpu_hours_cutoff',
    default=0, help='Ignore users with less than this many gpu-hours in the \
    specified window (default: 0)')
psr.add_argument('-e', type=str, action='store', dest='end_date',
    default=None, help='Create report ending on this date and going back in time \
    from this date by -t <hours> or -d <days> (format MM/DD/YYYY)')
ext = psr.add_mutually_exclusive_group(required=False)
ext.add_argument('-u', type=str, action='store', dest='netid',
    default='-1', help='Create report for a single user')
ext.add_argument('-r', action='store_true', help='Flag to sort by utilization \
    instead of GPU-hours (cannot be used with -p or -s)')
ext.add_argument('-p', action='store_true', help='Flag to show usage grouped \
    by department (only -t or -d allowed, e.g., checkgpu -d 28 -p)')
ext.add_argument('-s', action='store_true', help='Flag to show usage grouped \
    by sponsor (only -t or -d allowed, e.g., checkgpu -d 7 -s)')
psr.add_argument('-h', '--help', action='help', default=argparse.SUPPRESS,
                help='Show this help message and exit.')
args = psr.parse_args()

host = gethostname().lower()
if ('tiger' not in host and 'tigressdata' not in host):
  print("Run script from tiger, tigercpu, tigergpu or tigressdata. Exiting ...")
  sys.exit(0)

# spacing in minutes between samples (set by how data is collected)
sampling_freq = 10

minutes_per_hour = 60.0
seconds_per_minute = 60.0
ratio = sampling_freq / minutes_per_hour

hours = args.hours
if (args.days != days_default): hours = 24 * args.days

if (hours < ratio):
  print('The -t option must be greater than %.3f. Similar for -d. Exiting ...' % ratio)
  sys.exit(0)
gpu_hours_cutoff = args.gpu_hours_cutoff
util_cutoff = args.util_cutoff
thisuser = args.netid

if args.p or args.s:
  thisuser = '-1'
  gpu_hours_cutoff = 0
  util_cutoff = 100

###############################################################################
datafile = '/scratch/gpfs/jdh4/gpustat/utilization.csv'
if ('tigressdata' in host):
  datafile = '/tiger' + datafile
from pathlib import Path
if not Path(datafile).is_file():
  print('Data file not found: %s. Are you on the tiger cluster?' % datafile)
  sys.exit(0)
#df = pd.read_hdf('utilization.h5', 'df')
df = pd.read_csv(datafile, header=None, usecols=[0, 3, 4])
df.columns = ['timestamp', 'username', 'usage']

end_stamp = int(time())
if (args.end_date):
  try:
    twelve_hours = 12 * minutes_per_hour * seconds_per_minute
    end_stamp = datetime.strptime(args.end_date, '%m/%d/%Y').timestamp() + twelve_hours
  except:
    print('Make sure date has format MM/DD/YYYY. Exiting ...')
    sys.exit(1)

# filter old records and idle nodes
seconds_in_window = hours * minutes_per_hour * seconds_per_minute
min_timestamp = min(df.timestamp)
 
if thisuser != '-1':
  df = df[(df.timestamp >= end_stamp - seconds_in_window) &
          (df.timestamp < end_stamp) & (df.username == thisuser)]
else:
  idle = df[(df.timestamp >= end_stamp - seconds_in_window) & (df.timestamp <= end_stamp) &
            pd.isna(df.username)]
  df   = df[(df.timestamp >= end_stamp - seconds_in_window) & (df.timestamp <= end_stamp) &
            pd.notna(df.username)]
  denom = df.shape[0] + idle.shape[0]
  pct_idle = 100.0 * idle.shape[0] / denom if denom != 0 else -1
if df.empty:
  print('\nNo results found.\n')
  sys.exit(0)

start_stamp = end_stamp - seconds_in_window
if (min_timestamp > start_stamp):
  min_date = datetime.fromtimestamp(min_timestamp).strftime('%m/%d/%Y')
  print(("\n*** WARNING: Earliest data was recorded on {0}. Overriding start\n"
         "date of window. ***").format(min_date))
  start_stamp = min_timestamp
else:
  # round to nearest 10 minutes
  start_stamp_hours = int(start_stamp / 3600)
  minutes = round((start_stamp - 3600 * start_stamp_hours) / 60, -1)
  start_stamp = 3600 * start_stamp_hours + minutes * 60

range_begin = datetime.fromtimestamp(start_stamp).strftime('%-I:%M %p %a (%-m/%-d)')
range_end   = datetime.fromtimestamp(max(df.timestamp)).strftime('%-I:%M %p %a (%-m/%-d)')
df = df.drop(columns=['timestamp'])

# compute utilization mean and std for each username then filter
overall_utilization = df.usage.mean()
df = df.groupby(by='username').agg([np.size, np.mean, np.std]).reset_index()
df.columns = ['username', 'gpu-hours', 'mean', 'std']
df['gpu-hours'] = df['gpu-hours'] / (minutes_per_hour / sampling_freq)
df['std'] = df['std'].apply(lambda x: x if pd.notna(x) else 0)
df = df[(df['gpu-hours'] > gpu_hours_cutoff) & (df['mean'] <= util_cutoff)]

# read cached user data
userfile = '/scratch/gpfs/jdh4/gpustat/cached_users.csv'
if ('tigressdata' in host):
  userfile = '/tiger' + userfile
ldap = pd.read_csv(userfile, header=0) if Path(userfile) else pd.DataFrame()
# join the two dataframes
df = pd.merge(df, ldap, how='left', left_on=['username'], right_on=['NETID'])
# perform sorting
sortby, isascend = ('mean', True) if args.r else ('gpu-hours', False)
df = df.sort_values(by=sortby, ascending=isascend)
df['gpu-hours'] = df['gpu-hours'].apply(round).astype(str).apply(lambda x: x + '  ')
df['mean'] = df['mean'].apply(round).astype(str).apply(lambda x: x + '  ')
df['std'] = df['std'].apply(round).astype(str).apply(lambda x: x + '  ')
df = df[['username', 'mean', 'std', 'gpu-hours', 'POSITION', 'DEPT', 'SPONSOR']]
df.columns = ['USER', 'MEAN(%)', 'STD(%)', 'GPU-HOURS', 'POSITION', 'DEPT', 'SPONSOR']

if args.p or args.s:
  field = 'DEPT' if args.p else 'SPONSOR'
  df['GPU-HOURS'] = df['GPU-HOURS'].astype(int)
  df = df[[field, 'GPU-HOURS']].groupby(by=field).agg(np.sum).reset_index()
  df['PROPORTION(%)'] = 100 * df['GPU-HOURS'] / df['GPU-HOURS'].sum()
  df['PROPORTION(%)'] = df['PROPORTION(%)'].apply(lambda x: str(round(x)) + '  ')
  df.columns = [field, 'GPU-HOURS', 'PROPORTION(%)']
  df = df.sort_values(by='GPU-HOURS', ascending=False)

# print results
df_str = df.fillna('').to_string(index=False).split('\n')
num_chars = len(df_str[0])

def center(text, n):
  spaces = ''.join([' '] * max(0, int(0.5 * (n - len(text)))))
  return spaces + text

print('')
if (args.p or args.s):
  print(center('TigerGPU Usage', num_chars))
else:
  print(center('TigerGPU Utilization and Usage', num_chars))
print(center(range_begin + ' - ' + range_end, num_chars))
if (not args.p and not args.s and thisuser == '-1'):
  print(center('Overall GPU utilization = %.1f%%' % overall_utilization, num_chars))
  print(center('Active GPUs/Idle GPUs = %.1f%%/%.1f%%' % (100 - pct_idle, pct_idle), num_chars))
if df.empty:
  print('No results were found.')
else:
  print('')
  print(df_str[0])
  print(''.join(['='] * num_chars))
  print('\n'.join(df_str[1:]))
  print(''.join(['='] * num_chars))
print('')
