#!/usr/licensed/anaconda3/2020.11/bin/python

# post issues at https://github.com/jdh4/tigergpu_visualization
# or write to halverson@princeton.edu

import sys
sys.path = list(filter(lambda p: p.startswith("/usr"), sys.path))
import os
os.environ['OMP_NUM_THREADS'] = "1"
import argparse
import textwrap
import json
import subprocess
import numpy as np
import pandas as pd
from time import time
from datetime import datetime, timedelta
from socket import gethostname

psr = argparse.ArgumentParser(add_help=False,
  description='Examine GPU utilization and usage of TigerGPU',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  epilog=textwrap.dedent('''
  Utilization is the fraction of time that a kernel is running on the GPU.
  For instance, a code with a main loop that runs a GPU kernel for 3 seconds
  and then does CPU work for 2 seconds has a utilization of 60%. Usage is a
  measure of the allocated GPU resources (it is independent of utilization).
  A code that runs for 12 hours using 4 GPUs has a usage of 48 GPU-hours.

  Examples:

    Create report for all users over the last week:
       $ checkgpu -d 7

    Show GPU usage by department over the last 36 hours:
       $ checkgpu -p -t 36

    Show users with a mean GPU utilization of less than 15% over the last 12 hours:
       $ checkgpu -c 15 -t 12

    Create report only for the user aturing over last 30 minutes:
       $ checkgpu -u aturing -t 0.5

    Create report for all users from June 1, 2020 to June 15, 2020:
       $ checkgpu -e 06/15/2020 -d 15
'''))

days_default = 1
grp = psr.add_mutually_exclusive_group(required=False)
grp.add_argument('-t', type=float, action='store', dest='hours',
    default=24, help='Create report over this many previous hours from now \
    (default: 24). Cannot be used with -d.')
grp.add_argument('-d', type=float, action='store', dest='days', default=days_default,
    help='Create report over this many previous days from now \
    (default: 1). Cannot be used with -t.')
psr.add_argument('-c', type=float, action='store', dest='util_cutoff',
    default=100, help='Only show users with less than this utilization(%%) \
    (default: 100)')
psr.add_argument('-g', type=float, action='store', dest='gpu_hours_cutoff',
    default=0, help='Ignore users with less than this many gpu-hours in the \
    specified window (default: 0)')
psr.add_argument('-e', type=str, action='store', dest='end_date',
    default=None, help='Create report ending on this date and going back in time \
    from this date by -t <hours> or -d <days> (format MM/DD/YYYY)')

# may conflict with -d
psr.add_argument('-b', type=str, action='store', dest='begin_date',
    default=None, help='Create report beginning on this date (format MM/DD/YYYY)')

psr.add_argument('-l', action='store_true', 
    help='Write the table to latex file')
psr.add_argument('-i', action='store_false',
    help='Ignore header (i.e., only show data)')
ext = psr.add_mutually_exclusive_group(required=False)
ext.add_argument('-u', type=str, action='store', dest='netid',
    default='-1', help='Create report for a single user')
ext.add_argument('-r', action='store_true', help='Flag to sort by utilization \
    instead of GPU-hours (cannot be used with -p or -s)')
ext.add_argument('-p', action='store_true', help='Flag to show usage grouped \
    by department (only -t or -d allowed, e.g., checkgpu -d 28 -p)')
ext.add_argument('-s', action='store_true', help='Flag to show usage grouped \
    by sponsor (only -t or -d allowed, e.g., checkgpu -d 7 -s)')
psr.add_argument('-h', '--help', action='help', default=argparse.SUPPRESS,
                help='Show this help message and exit.')
args = psr.parse_args()

host = gethostname().lower()
if ('della-gpu' not in host and 'tiger' not in host and 'traverse' not in host):
  print("Run checkgpu from della-gpu, tigercpu, tigergpu or traverse. Exiting ...")
  sys.exit(0)

if ('della-gpu' in host):
  cluster = "Della GPU"
  num_gpus = 40
elif ('tiger' in host):
  cluster = "TigerGPU"
  num_gpus = 320
elif ('traverse' in host):
  cluster = "Traverse"
  num_gpus = 184
else:
  cluster = "UNKNOWN"
  num_gpus = -1

# spacing in minutes between samples (set by how data is collected)
sampling_freq = 10

minutes_per_hour = 60.0
seconds_per_minute = 60.0
ratio = sampling_freq / minutes_per_hour

hours = args.hours
if (args.days != days_default): hours = 24 * args.days

if (hours < ratio):
  print('The -t option must be greater than %.3f. Similar for -d. Exiting ...' % ratio)
  sys.exit(0)
gpu_hours_cutoff = args.gpu_hours_cutoff
util_cutoff = args.util_cutoff
thisuser = args.netid

if args.p or args.s:
  thisuser = '-1'
  gpu_hours_cutoff = 0
  util_cutoff = 100

# read in data
datafile = '/home/jdh4/bin/gpus/utilization.json'
from pathlib import Path
if not Path(datafile).is_file():
  print('Data file not found: %s. Are you on the right cluster?' % datafile)
  sys.exit(0)
rows = []
with open(datafile) as fp:
  for line in fp.readlines():
    x = json.loads(line)
    rows.append(list(x.values()))
df = pd.DataFrame(rows)
del rows
#{"timestamp": "1626876002", "host": "della-i14g16", "index": "0", "user": "bingjiay", "util": "82", "jobid": "35324200"}
df.columns = ['timestamp', 'host', 'index', 'username', 'usage', 'jobid']

# remove cryoem
if ('tiger' in host):
  cryoem = ["tiger-h" + str(i) + 'g' + str(j) for i in [19, 20, 21, 23, 24, 25, 26] for j in [1, 2]]
  cryoem.append("tiger-i26g1")
  cryoem.append("tiger-i26g2")
  df = df[~df.host.isin(cryoem)]

df = df[['timestamp', 'username', 'usage']]
df = df.astype({'timestamp':'int64'})

end_stamp = int(time())
if (args.end_date):
  try:
    twelve_hours = 12 * minutes_per_hour * seconds_per_minute
    end_stamp = datetime.strptime(args.end_date, '%m/%d/%Y').timestamp() + twelve_hours
  except:
    print('Make sure date has format MM/DD/YYYY. Exiting ...')
    sys.exit(1)

if (args.begin_date):
  try:
    twelve_hours = 12 * minutes_per_hour * seconds_per_minute
    begin_stamp = datetime.strptime(args.begin_date, '%m/%d/%Y').timestamp() + twelve_hours
  except:
    print('Make sure date has format MM/DD/YYYY. Exiting ...')
    sys.exit(1)

# filter old records and idle nodes
seconds_in_window = hours * minutes_per_hour * seconds_per_minute
min_timestamp = min(df.timestamp)

if (args.begin_date):
  df = df[(df.timestamp >= begin_stamp) & (df.timestamp <= end_stamp)]
else:
  df = df[(df.timestamp >= end_stamp - seconds_in_window) & (df.timestamp <= end_stamp)]

num_entries = df.shape[0]
idle = df[df.username == "root"].shape[0]
offline = df[df.username == "OFFLINE"].shape[0]
num_active = num_entries - idle - offline
pct_idle = 100.0 * idle / num_entries if num_entries != 0 else -1
pct_offline = 100.0 * offline / num_entries if num_entries != 0 else -1

df = df[(df.username != "root") & (df.username != "OFFLINE")]
  
if df.empty:
  print('\nNo results found.\n')
  sys.exit(0)

df = df.astype({'usage':'int32'})

if thisuser != '-1':
  # group by week
  wk = df[df.username == thisuser].copy()
  wk = wk.drop(columns=['username'])
  wk.columns = ['timestamp', 'util.(%)']
  wk['timestamp'] = pd.to_datetime(wk.timestamp, unit='s')
  wk = wk.groupby(pd.Grouper(key='timestamp', freq='W')).agg([np.size, np.mean]).reset_index()
  wk.columns = ["Week", "GPU-Hours", "Util.(%)"]
  wk['GPU-Hours'] = wk['GPU-Hours'] / (minutes_per_hour / sampling_freq)
  wk['GPU-Hours'] = wk['GPU-Hours'].apply(lambda x: round(x) if pd.notna(x) else x)
  wk['Util.(%)'] = wk['Util.(%)'].apply(lambda x: round(x) if pd.notna(x) else x)
  wk = wk[["Week", "Util.(%)", "GPU-Hours"]]
  print("\n", wk.fillna('N/A').to_string(index=False))
  del wk

if (args.begin_date):
  twelve_hours = 12 * minutes_per_hour * seconds_per_minute
  start_stamp = datetime.strptime(args.begin_date, '%m/%d/%Y').timestamp() + twelve_hours
else:
  start_stamp = end_stamp - seconds_in_window
if (min_timestamp > start_stamp):
  min_date = datetime.fromtimestamp(min_timestamp).strftime('%m/%d/%Y')
  print(("\n*** WARNING: Earliest data was recorded on {0}. Overriding start\n"
         "date of window. ***").format(min_date))
  start_stamp = min_timestamp
else:
  # round to nearest 10 minutes
  start_stamp_hours = int(start_stamp / 3600)
  minutes = round((start_stamp - 3600 * start_stamp_hours) / 60, -1)
  start_stamp = 3600 * start_stamp_hours + minutes * 60

range_begin = datetime.fromtimestamp(start_stamp).strftime('%-I:%M %p %a (%-m/%-d)')
range_end   = datetime.fromtimestamp(max(df.timestamp)).strftime('%-I:%M %p %a (%-m/%-d)')
dt_hours = (datetime.fromtimestamp(max(df.timestamp)) - datetime.fromtimestamp(start_stamp))/timedelta(hours=1)
df = df.drop(columns=['timestamp'])

# compute utilization mean and std for each username then filter
overall_utilization = df.usage.mean()
df = df.groupby(by='username').agg([np.size, np.mean, np.std]).reset_index()
df.columns = ['username', 'gpu-hours', 'mean', 'std']
df['gpu-hours'] = df['gpu-hours'] / (minutes_per_hour / sampling_freq)
df['PROPORTION(%)'] = 100 * df['gpu-hours'] / df['gpu-hours'].sum()
df['PROPORTION(%)'] = df['PROPORTION(%)'].apply(lambda x: str(round(x)) + '  ')
if thisuser != '-1':
  df = df[df.username == thisuser]
df['std'] = df['std'].apply(lambda x: x if pd.notna(x) else 0)
df = df[(df['gpu-hours'] > gpu_hours_cutoff) & (df['mean'] <= util_cutoff)]

# check 1 ignores downtime and takes into account total number of gpus explicitly
check1 = df['gpu-hours'].sum() / (num_gpus * ((100 - pct_idle - pct_offline) / 100.0) * dt_hours)
# check 2 is just counting
check2 = df['gpu-hours'].sum() / (num_active / (minutes_per_hour / sampling_freq))

# read cached user data
userfile = '/home/jdh4/bin/gpus/cached_users.csv'
ldap = pd.read_csv(userfile, header=0) if Path(userfile) else pd.DataFrame()
# join the two dataframes
df = pd.merge(df, ldap, how='left', left_on=['username'], right_on=['NETID'])
# perform sorting
sortby, isascend = ('mean', True) if args.r else ('gpu-hours', False)
df = df.sort_values(by=sortby, ascending=isascend)
df['gpu-hours'] = df['gpu-hours'].apply(round).astype(str).apply(lambda x: x + '  ')
df['mean'] = df['mean'].apply(round).astype(str).apply(lambda x: x + '  ')
df['std'] = df['std'].apply(round).astype(str).apply(lambda x: x + '  ')
df = df[['username', 'mean', 'std', 'gpu-hours', 'PROPORTION(%)', 'POSITION', 'DEPT', 'SPONSOR']]
df.columns = ['USER', 'MEAN(%)', 'STD(%)', 'GPU-HOURS', 'PROPORTION(%)', 'POSITION', 'DEPT', 'SPONSOR']

def sshare_dept(netid):
  cmd = f"sshare -u {netid} | grep {netid}"
  output = subprocess.run(cmd, capture_output=True, shell=True)
  dept = output.stdout.decode("utf-8").split('\n')
  if dept == ['']:
    return np.nan
  else:
    return dept[0].split()[0].upper()

# replace dept info using sshare
df['DEPT'] = df.USER.apply(lambda netid: sshare_dept(netid))

def multi_depts(x):
  return ','.join(set(x))

if args.p or args.s:
  if args.p:
    df['DEPT'] = df.DEPT.fillna('<UNKNOWN>')
    field = 'DEPT'
    df['GPU-HOURS'] = df['GPU-HOURS'].astype(int)
    df = df[[field, 'GPU-HOURS']].groupby(by=field).agg(np.sum).reset_index()
    df['PROPORTION(%)'] = 100 * df['GPU-HOURS'] / df['GPU-HOURS'].sum()
    df['PROPORTION(%)'] = df['PROPORTION(%)'].apply(lambda x: str(round(x)) + '  ')
    df.columns = [field, 'GPU-HOURS', 'PROPORTION(%)']
    df = df.sort_values(by='GPU-HOURS', ascending=False)
  elif args.s:
    df['SPONSOR'] = df.SPONSOR.fillna('<UNKNOWN>')
    df['DEPT'] = df.DEPT.fillna('<UNKNOWN>')
    field = 'SPONSOR'
    df['GPU-HOURS'] = df['GPU-HOURS'].astype(int)
    df = df[[field, 'DEPT', 'GPU-HOURS']].groupby(by=field).agg({"DEPT":multi_depts, "GPU-HOURS":np.sum}).reset_index()
    df['PROPORTION(%)'] = 100 * df['GPU-HOURS'] / df['GPU-HOURS'].sum()
    df['PROPORTION(%)'] = df['PROPORTION(%)'].apply(lambda x: str(round(x)) + '  ')
    df.columns = [field, 'DEPT', 'GPU-HOURS', 'PROPORTION(%)']
    df = df.sort_values(by='GPU-HOURS', ascending=False)

# write latex
if args.l:
  ef = df.copy()
  ef = ef.reset_index(drop=True)
  ef.index += 1
  ef.fillna('').to_latex('table.tex', longtable=True)
  del ef

# print results
df_str = df.fillna('').to_string(index=False).split('\n')
num_chars = len(df_str[0])

def center(text, n):
  spaces = ''.join([' '] * max(0, int(0.5 * (n - len(text)))))
  return spaces + text

if args.i:
    print('')
    if (args.p or args.s):
      print(center(cluster + ' Usage', num_chars))
    else:
      print(center(cluster + ' Utilization and Usage', num_chars))
    print(center(range_begin + ' - ' + range_end, num_chars))
    if (not args.p and not args.s and thisuser == '-1'):
      print(center('Allocated GPUs/Idle GPUs/No Info = %.1f%%/%.1f%%/%.1f%%' % \
            (100 - pct_idle - pct_offline, pct_idle, pct_offline), num_chars))
      print(center('Mean GPU utilization of allocated GPUs = %.1f%%' % overall_utilization, num_chars))
if df.empty:
  print('No results were found.')
else:
  if args.i: print('')
  if args.i: print(df_str[0])
  if args.i: print(''.join(['='] * num_chars))
  if args.i:
    print('\n'.join(df_str[1:]))
  else:
    # header not printed
    df.POSITION = df.POSITION.fillna("--").astype('string')
    df.POSITION = df.POSITION.apply(lambda x: x.replace(" ", "_"))
    df_str_sep = ['|'.join(line.split()) for line in df.fillna('--').to_string(index=False, header=True).split('\n')]
    print('\n'.join(df_str_sep))
  if args.i: print(''.join(['='] * num_chars))
if args.i: print('')

if (abs(check1 - 1.0) > 0.04 or abs(check2 - 1.0) > 0.04) and thisuser == '-1' and \
   gpu_hours_cutoff == 0 and util_cutoff == 100:
  if args.i: print(f"  *** check1={check1:.2f}, check2={check2:.2f} ***")
