#!/usr/licensed/anaconda3/2020.2/bin/python
import sys
sys.path = list(filter(lambda p: p.startswith("/usr"), sys.path))
import argparse
import textwrap
import numpy as np
import pandas as pd
from time import time
from datetime import datetime

psr = argparse.ArgumentParser(add_help=False,
  description='Examine GPU utilization and usage of TigerGPU',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  epilog=textwrap.dedent('''
  Show users with a GPU utilization of less than 25% over the last two days:
       $ checkgpu -c 25 -t 48

  Show utilization for all users over the last week:
       $ checkgpu -t 168

  GPU usage by department over the last 24 hours (which is default time window):
       $ checkgpu -d
'''))
psr.add_argument('-t', type=float, action='store', dest='hours',
    default=24, help='Create report over this many previous hours from now \
    (default: 24) [1 week = 168 hours, 2 weeks = 336 hours]')
psr.add_argument('-c', type=float, action='store', dest='util_cutoff',
    default=100, help='Only show users with less than this utilization(%%) \
    (default: 100)')
psr.add_argument('-g', type=float, action='store', dest='gpu_hours_cutoff',
    default=0, help='Ignore users with less than this many gpu-hours in the \
    specified window (default: 0)')
psr.add_argument('-u', type=str, action='store', dest='netid',
    default='-1', help='Create report for a single user')
psr.add_argument('-r', action='store_true', help='Flag to sort by GPU-hours \
    instead of mean utilization (does not work with -d or -s)')
psr.add_argument('-d', action='store_true', help='Flag to show usage grouped \
    by department (only -t allowed, e.g., checkgpu -t 48 -d)')
psr.add_argument('-s', action='store_true', help='Flag to show usage grouped \
    by sponsor (only -t allowed, e.g., checkgpu -t 48 -s)')
psr.add_argument('-h', '--help', action='help', default=argparse.SUPPRESS,
                help='Show this help message and exit.')
args = psr.parse_args()

# spacing in minutes between samples (set by how data is collected)
sampling_freq = 10
minutes_per_hour = 60.0
ratio = sampling_freq / minutes_per_hour
total_gpus = 312

hours = args.hours
if (hours < ratio):
  print('The -t option must be greater than %.3f. Exiting ...' % ratio)
  sys.exit(1)
gpu_hours_cutoff = args.gpu_hours_cutoff
util_cutoff = args.util_cutoff
thisuser = args.netid

if args.d or args.s:
  thisuser = '-1'
  gpu_hours_cutoff = 0
  util_cutoff = 100

###############################################################################
datafile = '/scratch/gpfs/jdh4/gpustat/utilization.csv'
from pathlib import Path
if not Path(datafile):
  print('Data file not found: %s. Are you on the tiger cluster?' % datafile)
  sys.exit(1)
df = pd.read_csv(datafile, header=None, usecols=[0, 3, 4])
df.columns = ['timestamp', 'username', 'usage']

# filter old records and idle nodes
now = int(time())
seconds_in_window = hours * 60 * 60
if thisuser != '-1':
  df = df[(df.timestamp >= now - seconds_in_window) & (df.username == thisuser)]
else:
  df = df[(df.timestamp >= now - seconds_in_window) & pd.notna(df.username)]
if df.empty:
  print('\nNo results found.\n')
  sys.exit(1)

range_begin = datetime.fromtimestamp(min(df.timestamp)).strftime('%-I:%M %p %a (%-m/%-d)')
range_end   = datetime.fromtimestamp(max(df.timestamp)).strftime('%-I:%M %p %a (%-m/%-d)')
df = df.drop(['timestamp'], axis=1)

# compute utilization mean and std for each username then filter
overall_utilization = df.usage.mean()
df = df.groupby(by='username').agg([np.size, np.mean, np.std]).reset_index()
df.columns = ['username', 'gpu-hours', 'mean', 'std']
df['gpu-hours'] = df['gpu-hours'] / (minutes_per_hour / sampling_freq)
overall_hours = df['gpu-hours'].sum()
df['std'] = df['std'].apply(lambda x: x if pd.notna(x) else 0)
df = df[(df['gpu-hours'] > gpu_hours_cutoff) & (df['mean'] < util_cutoff)]

# read cached user data
userfile = '/scratch/gpfs/jdh4/gpustat/cached_users.csv'
ldap = pd.read_csv(userfile, header=0) if Path(datafile) else pd.DataFrame()
# join the two dataframes
df = pd.merge(df, ldap, how='left', left_on=['username'], right_on=['NETID'])
# perform sorting
sortby, isascend = ('gpu-hours', False) if args.r else ('mean', True)
df = df.sort_values(by=sortby, ascending=isascend)
df['gpu-hours'] = df['gpu-hours'].apply(round).astype(str).apply(lambda x: x + '  ')
df['mean'] = df['mean'].apply(round).astype(str).apply(lambda x: x + '  ')
df['std'] = df['std'].apply(round).astype(str).apply(lambda x: x + '  ')
df = df[['username', 'mean', 'std', 'gpu-hours', 'POSITION', 'DEPT', 'SPONSOR']]
df.columns = ['USERNAME', 'MEAN(%)', 'STD(%)', 'GPU-HOURS', 'POSITION', 'DEPT', 'SPONSOR']

if args.d or args.s:
  field = 'DEPT' if args.d else 'SPONSOR'
  df['GPU-HOURS'] = df['GPU-HOURS'].astype(int)
  df = df[[field, 'GPU-HOURS']].groupby(by=field).agg(np.sum).reset_index()
  df['PROPORTION(%)'] = 100 * df['GPU-HOURS'] / df['GPU-HOURS'].sum()
  df['PROPORTION(%)'] = df['PROPORTION(%)'].apply(lambda x: str(round(x)) + '  ')
  df.columns = [field, 'GPU-HOURS', 'PROPORTION(%)']
  df = df.sort_values(by='GPU-HOURS', ascending=False)

# print results
df_str = df.fillna('').to_string(index=False).split('\n')
num_chars = len(df_str[0])

def center(text, n):
  spaces = ''.join([' '] * max(0, int(0.5 * (n - len(text)))))
  return spaces + text

print('')
if (args.d or args.s):
  print(center('TigerGPU Usage', num_chars))
else:
  print(center('TigerGPU Utilization and Usage', num_chars))
print(center(range_begin + ' - ' + range_end, num_chars))
if (not args.d and not args.s and thisuser == '-1'):
  print(center('Overall GPU utilization = %.1f%%' % overall_utilization, num_chars))
  pct_idle = 100 * (1.0 - overall_hours / (total_gpus * hours))
  print(center('Idle GPUs = %.1f%%' % pct_idle, num_chars))
if df.empty:
  print('No results were found.')
else:
  print('')
  print(df_str[0])
  print(''.join(['='] * num_chars))
  print('\n'.join(df_str[1:]))
  print(''.join(['='] * num_chars))
print('')
